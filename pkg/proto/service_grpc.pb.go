// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/service.proto

package signservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SignService_Sign_FullMethodName         = "/signservice.SignService/Sign"
	SignService_Verify_FullMethodName       = "/signservice.SignService/Verify"
	SignService_SignBatch_FullMethodName    = "/signservice.SignService/SignBatch"
	SignService_VerifyBatch_FullMethodName  = "/signservice.SignService/VerifyBatch"
	SignService_SignStream_FullMethodName   = "/signservice.SignService/SignStream"
	SignService_VerifyStream_FullMethodName = "/signservice.SignService/VerifyStream"
)

// SignServiceClient is the client API for SignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignServiceClient interface {
	Sign(ctx context.Context, in *Document, opts ...grpc.CallOption) (*DocSign, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
	SignBatch(ctx context.Context, in *DocumentBatch, opts ...grpc.CallOption) (*DocSignBatch, error)
	VerifyBatch(ctx context.Context, in *VerifyBatchRequest, opts ...grpc.CallOption) (*VerifyBatchResponse, error)
	// Streaming API
	SignStream(ctx context.Context, opts ...grpc.CallOption) (SignService_SignStreamClient, error)
	VerifyStream(ctx context.Context, opts ...grpc.CallOption) (SignService_VerifyStreamClient, error)
}

type signServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignServiceClient(cc grpc.ClientConnInterface) SignServiceClient {
	return &signServiceClient{cc}
}

func (c *signServiceClient) Sign(ctx context.Context, in *Document, opts ...grpc.CallOption) (*DocSign, error) {
	out := new(DocSign)
	err := c.cc.Invoke(ctx, SignService_Sign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signServiceClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, SignService_Verify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signServiceClient) SignBatch(ctx context.Context, in *DocumentBatch, opts ...grpc.CallOption) (*DocSignBatch, error) {
	out := new(DocSignBatch)
	err := c.cc.Invoke(ctx, SignService_SignBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signServiceClient) VerifyBatch(ctx context.Context, in *VerifyBatchRequest, opts ...grpc.CallOption) (*VerifyBatchResponse, error) {
	out := new(VerifyBatchResponse)
	err := c.cc.Invoke(ctx, SignService_VerifyBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signServiceClient) SignStream(ctx context.Context, opts ...grpc.CallOption) (SignService_SignStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SignService_ServiceDesc.Streams[0], SignService_SignStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &signServiceSignStreamClient{stream}
	return x, nil
}

type SignService_SignStreamClient interface {
	Send(*Document) error
	Recv() (*DocSign, error)
	grpc.ClientStream
}

type signServiceSignStreamClient struct {
	grpc.ClientStream
}

func (x *signServiceSignStreamClient) Send(m *Document) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signServiceSignStreamClient) Recv() (*DocSign, error) {
	m := new(DocSign)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *signServiceClient) VerifyStream(ctx context.Context, opts ...grpc.CallOption) (SignService_VerifyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SignService_ServiceDesc.Streams[1], SignService_VerifyStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &signServiceVerifyStreamClient{stream}
	return x, nil
}

type SignService_VerifyStreamClient interface {
	Send(*VerifyRequest) error
	Recv() (*VerifyResponse, error)
	grpc.ClientStream
}

type signServiceVerifyStreamClient struct {
	grpc.ClientStream
}

func (x *signServiceVerifyStreamClient) Send(m *VerifyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signServiceVerifyStreamClient) Recv() (*VerifyResponse, error) {
	m := new(VerifyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignServiceServer is the server API for SignService service.
// All implementations must embed UnimplementedSignServiceServer
// for forward compatibility
type SignServiceServer interface {
	Sign(context.Context, *Document) (*DocSign, error)
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	SignBatch(context.Context, *DocumentBatch) (*DocSignBatch, error)
	VerifyBatch(context.Context, *VerifyBatchRequest) (*VerifyBatchResponse, error)
	// Streaming API
	SignStream(SignService_SignStreamServer) error
	VerifyStream(SignService_VerifyStreamServer) error
	mustEmbedUnimplementedSignServiceServer()
}

// UnimplementedSignServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSignServiceServer struct {
}

func (UnimplementedSignServiceServer) Sign(context.Context, *Document) (*DocSign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedSignServiceServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedSignServiceServer) SignBatch(context.Context, *DocumentBatch) (*DocSignBatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignBatch not implemented")
}
func (UnimplementedSignServiceServer) VerifyBatch(context.Context, *VerifyBatchRequest) (*VerifyBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBatch not implemented")
}
func (UnimplementedSignServiceServer) SignStream(SignService_SignStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SignStream not implemented")
}
func (UnimplementedSignServiceServer) VerifyStream(SignService_VerifyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method VerifyStream not implemented")
}
func (UnimplementedSignServiceServer) mustEmbedUnimplementedSignServiceServer() {}

// UnsafeSignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignServiceServer will
// result in compilation errors.
type UnsafeSignServiceServer interface {
	mustEmbedUnimplementedSignServiceServer()
}

func RegisterSignServiceServer(s grpc.ServiceRegistrar, srv SignServiceServer) {
	s.RegisterService(&SignService_ServiceDesc, srv)
}

func _SignService_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServiceServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignService_Sign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServiceServer).Sign(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignService_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServiceServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignService_SignBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServiceServer).SignBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignService_SignBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServiceServer).SignBatch(ctx, req.(*DocumentBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignService_VerifyBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServiceServer).VerifyBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignService_VerifyBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServiceServer).VerifyBatch(ctx, req.(*VerifyBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignService_SignStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignServiceServer).SignStream(&signServiceSignStreamServer{stream})
}

type SignService_SignStreamServer interface {
	Send(*DocSign) error
	Recv() (*Document, error)
	grpc.ServerStream
}

type signServiceSignStreamServer struct {
	grpc.ServerStream
}

func (x *signServiceSignStreamServer) Send(m *DocSign) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signServiceSignStreamServer) Recv() (*Document, error) {
	m := new(Document)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SignService_VerifyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignServiceServer).VerifyStream(&signServiceVerifyStreamServer{stream})
}

type SignService_VerifyStreamServer interface {
	Send(*VerifyResponse) error
	Recv() (*VerifyRequest, error)
	grpc.ServerStream
}

type signServiceVerifyStreamServer struct {
	grpc.ServerStream
}

func (x *signServiceVerifyStreamServer) Send(m *VerifyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signServiceVerifyStreamServer) Recv() (*VerifyRequest, error) {
	m := new(VerifyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignService_ServiceDesc is the grpc.ServiceDesc for SignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signservice.SignService",
	HandlerType: (*SignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sign",
			Handler:    _SignService_Sign_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _SignService_Verify_Handler,
		},
		{
			MethodName: "SignBatch",
			Handler:    _SignService_SignBatch_Handler,
		},
		{
			MethodName: "VerifyBatch",
			Handler:    _SignService_VerifyBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SignStream",
			Handler:       _SignService_SignStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "VerifyStream",
			Handler:       _SignService_VerifyStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
